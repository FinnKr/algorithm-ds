// Given a string, find if there is any sub-sequence that repeats itself.
// A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.



#include<iostream>
using namespace std;

// int dp[1001][1001];

int dpCheckRepeatingSubSeq(string s1,string s2 ){
    string s1(A);
    string s2(A);
    
    int n = s1.length();
    int dp[n+1][n+1];

    for(int i=0; i<=n; i++) dp[i][0] = 0;
    for(int i=0; i<=n; i++) dp[0][i] = 0;
    // cout<<"BC"<<s1[0]<<" "<<s2[2];
    for(int i=1; i<=n;i++){
        for(int j=1; j<=n; j++) {
            if(s1[i-1]==s2[j-1] and i!=j) {
                dp[i][j] = 1 + dp[i-1][j-1];
            }
            else 
                dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
        }

    }
    
    // for(int i=0; i<=n; i++){
    //     for(int j=0; j<=n; j++){
    //         cout<<dp[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }

    if(dp[n][n]<=1){
        return 0;
    }
    else return 1;

}

int checkRepeatingSubSeq(string s1,string s2, int i, int j){

        if(i>=s1.length() || j>=s2.length()){
        return 0;
        }

        if(s1[i]==s2[j] and i!=j) {
        return 1 + checkRepeatingSubSeq(s1,s2,i+1,j+1);
        }

        return max(
            checkRepeatingSubSeq(s1,s2,i+1,j),
            checkRepeatingSubSeq(s1,s2,i,j+1)
        );
}


int main(){
    string s;
    cin>>s;
    cout<<dpCheckRepeatingSubSeq(s,s);
    return 0;
}